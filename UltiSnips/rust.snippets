#######################################################################
#                            Rust Snippets                            #
#######################################################################

priority -50

snippet || "Closure, anonymous function (inline)" i
${1:move }|$2| { $3 }
endsnippet

snippet |} "Closure, anonymous function (block)" i
${1:move }|$2| {
	$3
}
endsnippet

snippet macro "macro_rules!" b
macro_rules! ${1:name} {
	(${2:matcher}) => (
		$3
	)
}
endsnippet

snippet fd "Struct field definition" w
${1:name}: ${2:Type},
endsnippet

snippet ifle "If let else" b
if let ${1:Some($2)} {
	${3://code}
} else {
	${4://code}
}
endsnippet

snippet ifl "If let" b
if let ${1:Some($2)} {
	${3://code}
}
endsnippet

snippet fn "pub fn name(?) -> ? {}"
fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet pfn "pub fn name(?) -> ? {}"
pub fn ${1:function_name}($2)${3/..*/ -> /}$3 {
	${VISUAL}$0
}
endsnippet

snippet main "main"
fn main() {
	${VISUAL}$0
}
endsnippet


snippet for "for ... in ..."

endsnippet

snippet ifl "info!" b
info!("$1"${2/..*/, /}$2);
endsnippet

snippet pri "print!(..)" b
print!("$1"${2/..*/, /}$2);
endsnippet

snippet pln "println!(..)" b
println!("$1"${2/..*/, /}$2);
endsnippet

snippet fmt "format!(..)"
format!("$1"${2/..*/, /}$2);
endsnippet

snippet ec "extern crate"
extern crate ${1:sync};
endsnippet

# Common types
snippet opt "Option<T>"
Option<${1:i32}>
endsnippet

snippet res "Result<T, E>"
Result<${1:()}, ${2:Box<Error>}>
endsnippet

# Loops
snippet loop "loop {}" b
loop {
	${0:${VISUAL}}
}
endsnippet
snippet wh "while loop"
while ${1:condition} {
	${0:${VISUAL}}
}
endsnippet

snippet for "for ... in ... loop"
for ${1:i} in ${2} {
	${0:${VISUAL}}
}
endsnippet

# TODO commenting
snippet todo "TODO comment"
// TODO: $0
endsnippet
